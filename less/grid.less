//
// Grid system
// --------------------------------------------------


// Set the container width, and override it for fixed navbars in media queries
.container {
  .container-fixed();
}

// mobile first defaults
.row {
  .make-row();
}

// Common styles for small and large grid columns
.commonStyles (@index) when (@index > 0) {
  .col-xs-@{index},
  .col-sm-@{index},
  .col-md-@{index},
  .col-lg-@{index} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
  }
  .commonStyles(@index - 1);
}
  .commonStyles(@grid-columns);


// Extra small grid
//
// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.col-xs-12` doesn't get floated on purpose—there's no need since
// it's full-width.

.extraSmallGrid (@index) when (@index > 0) {
  .col-xs-@{index} {
    float: left;
    width: percentage((@index / @grid-columns));
  }
  .extraSmallGrid(@index - 1);
}
  .extraSmallGrid(@grid-columns);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.col-sm-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-tablet) {
  .container {
    max-width: @container-tablet;
  }

  .smallGrid (@index) when (@index > 0) {
    .col-sm-@{index} {
      float: left;
      width: percentage((@index / @grid-columns));
    }
    // Push and pull columns for source order changes
    .col-sm-push-@{index} {
      left: percentage((@index / @grid-columns));
    }
    .col-sm-pull-@{index} {
      right: percentage((@index / @grid-columns));
    }
    // Offsets
    .col-sm-offset-@{index} {
      margin-left: percentage((@index / @grid-columns));
    }
    .smallGrid(@index - 1);
  }
  .smallGrid(@grid-columns);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.col-md-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-desktop) {
  .container {
    max-width: @container-desktop;
  }

  .mediumGrid (@index) when (@index > 0) {
    .col-md-@{index} {
      float: left;
      width: percentage((@index / @grid-columns));
    }
    // Push and pull columns for source order changes
    .col-md-push-@{index} {
      left: percentage((@index / @grid-columns));
    }
    .col-md-pull-@{index} {
      right: percentage((@index / @grid-columns));
    }
    // Offsets
    .col-md-offset-@{index} {
      margin-left: percentage((@index / @grid-columns));
    }
    .mediumGrid(@index - 1);
  }
  .mediumGrid(@grid-columns);
  .col-md-push-0  { left: auto; }
  .col-md-pull-0  { right: auto; }
  .col-md-offset-0  { margin-left: 0; }
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.col-lg-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-lg-desktop) {
  .container {
    max-width: @container-lg-desktop;
  }

  .largeGrid (@index) when (@index > 0) {
    .col-lg-@{index} {
      float: left;
      width: percentage((@index / @grid-columns));
    }
    // Push and pull columns for source order changes
    .col-lg-push-@{index} {
      left: percentage((@index / @grid-columns));
    }
    .col-lg-pull-@{index} {
      right: percentage((@index / @grid-columns));
    }
    // Offsets
    .col-lg-offset-@{index} {
      margin-left: percentage((@index / @grid-columns));
    }
    .largeGrid(@index - 1);
  }
  .largeGrid(@grid-columns);
  .col-lg-push-0  { left: auto; }
  .col-lg-pull-0  { right: auto; }
  .col-lg-offset-0  { margin-left: 0; }
}
